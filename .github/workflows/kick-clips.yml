on:
  schedule:
    - cron: '*/30 * * * *'   # co 30 minut
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: kick-cache-update
  cancel-in-progress: false

jobs:
  collect:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kick-cache branch
        uses: actions/checkout@v4
        with:
          ref: kick-cache
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Run Kick fetcher (generates cache)
        run: python kick/scrape_kick_clips.py

      - name: Commit ONLY cache (amend last commit, keep database)
        run: |
          set -e
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          # Upewnij się, że database nie wejdzie do commita
          git restore --staged --worktree --source HEAD -- kick/kick_database.json || true

          # Dodaj tylko cache
          git add --force kick/kick_clips_cache.json

          # Jeśli cache się nie zmienił — koniec (zero commitów)
          git diff --cached --quiet && exit 0

          # Zsynchronizuj się z remote, żeby nie przepisać cudzych commitów
          git fetch origin kick-cache
          git rebase origin/kick-cache || true

          # Nadpisz ostatni commit (zamiast dodawać nowy)
          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            git commit --amend --no-edit
          else
            git commit -m "update kick cache"
          fi

          # Bezpieczny push z nadpisaniem TYLKO bieżącego commita cache
          git push --force-with-lease origin HEAD:kick-cache
